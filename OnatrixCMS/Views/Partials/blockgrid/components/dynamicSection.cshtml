@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using static Umbraco.Cms.Core.PropertyEditors.ValueConverters.ColorPickerValueConverter;

@{
    var sectionTitle = Model?.Content.Value<string>("sectionTitle") ?? "";
    var sectionId = sectionTitle?.ToString().ToLower().Trim().Replace(" ", "-");

    var spacingTopClass = (Model!.Content.Value<bool>("addSpaceToTop")) ? "addSpaceToTop" : "";
    var spacingBottomClass = (Model!.Content.Value<bool>("addSpaceToBottom")) ? "addSpaceToBottom" : "";
    var centerContent = (Model!.Content.Value<bool>("centerContentInSection")) ? "centerContent" : "";

    var sectionBackgroundImage = Model?.Content.Value<IPublishedContent>("sectionBackgroundImage")?.Url() ?? null; 
    var sectionBackgroundImageAltText = Model?.Content.Value<string>("sectionBackgroundImageAltText") ?? "Section Image"; 

    var sectionBackgroundColor = Model?.Content.Value<PickedColor>("sectionBackgroundColor")?.Label.ToLower() ?? "transparent";

    var gradientBackgroundColors = Model?.Content.Value<IEnumerable<Umbraco.Cms.Core.Models.Blocks.BlockListItem>>("gradientBackgroundColor");
 
    var gradientBackgroundColor = gradientBackgroundColors?.FirstOrDefault();

    var gradientBackgroundColorOne = gradientBackgroundColor?.Content.Value<PickedColor>("backgroundColor1")?.Label.ToLower() ?? "";
    var gradientBackgroundColorTwo = gradientBackgroundColor?.Content.Value<PickedColor>("backgroundColor2")?.Label.ToLower() ?? "";
    var amount = gradientBackgroundColor?.Content.Value<string>("amountOfGradiens") ?? "";
    int.TryParse(amount, out var subtract);
    int secendAmount = 100 - subtract;
    
    
    if(gradientBackgroundColor != null)
    {
        sectionBackgroundColor = "transparent";
    }

    var gradientStyle = gradientBackgroundColor != null
      ? $"background: linear-gradient(to bottom, var(--color-{gradientBackgroundColorOne}) {subtract}%, var(--color-{gradientBackgroundColorTwo}) {secendAmount}%);"
      : "";
}


<section id="@sectionId" style="background-color: var(--color-@sectionBackgroundColor); @gradientStyle" class="section @spacingTopClass @spacingBottomClass">
    
    <div class="container @centerContent">

        @if(!string.IsNullOrEmpty(sectionBackgroundImage))
        {
            <div class="backgroundImageContainer">
                <img class="backgroundImage" src="@sectionBackgroundImage" alt="@sectionBackgroundImageAltText" />
            </div>
        } 

        @await Html.GetBlockGridItemAreasHtmlAsync(Model!)
    </div>
</section>